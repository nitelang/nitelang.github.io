[{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://nitelang.github.io/tuts/example/","section":"tuts","title":"Compose Docs"},{"body":"These docs consists of two parts:\nHugo Compose Themes docs Hugo Clarity Theme docs. Please note that the features listed under each theme are independent of each other. That is to say, some features may only be found in one theme and not in both.\nCompose Theme Docs Clarity Theme Docs Test ","link":"https://nitelang.github.io/docs/the-language/differences/","section":"docs","title":"Differences From Lua"},{"body":"These docs consists of two parts:\nHugo Compose Themes docs Hugo Clarity Theme docs. Please note that the features listed under each theme are independent of each other. That is to say, some features may only be found in one theme and not in both.\nCompose Theme Docs Clarity Theme Docs Test ","link":"https://nitelang.github.io/docs/the-language/","section":"docs","title":"The Language"},{"body":"Just an example of an additional docs folder.\nSurprised that it doesn't have a left sidebar menu? Worry not; just follow this instructions to enable it.\nTutorials Back to docs ","link":"https://nitelang.github.io/tuts/","section":"tuts","title":"Tutorials' Docs"},{"body":"These docs consists of two parts:\nHugo Compose Themes docs Hugo Clarity Theme docs. Please note that the features listed under each theme are independent of each other. That is to say, some features may only be found in one theme and not in both.\nCompose Theme Docs Clarity Theme Docs ","link":"https://nitelang.github.io/docs/standard-library/","section":"docs","title":"Standard Library"},{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://nitelang.github.io/docs/getting-started/","section":"docs","title":"Getting Started"},{"body":"A Guide To Write Idiomatic Nite Code.\nGet started now ","link":"https://nitelang.github.io/docs/good-nite/","section":"docs","title":"Good Nite"},{"body":"","link":"https://nitelang.github.io/docs/support/","section":"docs","title":"Support"},{"body":"Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.\nWith compose theme, you can use mermaid using a custom shortcode as follows:\nSequence Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-\u0026gt;\u0026gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts\u0026lt;br/\u0026gt;prevail... 10 John--\u0026gt;\u0026gt;Alice: Great! 11 John-\u0026gt;\u0026gt;Bob: How about you? 12 Bob--\u0026gt;\u0026gt;John: Jolly good! 13{{\u0026lt; /mermaid \u0026gt;}} Result\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughtsprevail... John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Flow Charts Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2flowchart TB 3 c1--\u0026gt;a2 4 subgraph one 5 a1--\u0026gt;a2 6 end 7 subgraph two 8 b1--\u0026gt;b2 9 end 10 subgraph three 11 c1--\u0026gt;c2 12 end 13 one --\u0026gt; two 14 three --\u0026gt; two 15 two --\u0026gt; c2 16{{\u0026lt; /mermaid \u0026gt;}} Result\nflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 Graphs Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph TB 3 sq[Square shape] --\u0026gt; ci((Circle shape)) 4 5 subgraph A 6 od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro 7 di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) 8 di==\u0026gt;ro2(Rounded square shape) 9 end 10 11 %% Notice that no text in shape are added here instead that is appended further down 12 e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] 13 14 %% Comments after double percent signs 15 e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) 16 17 cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); 18 19 classDef green fill:#9f6,stroke:#333,stroke-width:2px; 20 classDef orange fill:#f96,stroke:#333,stroke-width:4px; 21 class sq,e green 22 class di orange 23{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph TB sq[Square shape] --\u003e ci((Circle shape)) subgraph A od\u003eOdd shape]-- Two lineedge comment --\u003e ro di{Diamond with line break} -.-\u003e ro(Rounded\nsquare\nshape) di==\u003ero2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u003e od3\u003eReally long text with linebreak\nin an Odd shape] %% Comments after double percent signs e((Inner / circle\nand some odd special characters)) --\u003e f(,.?!+-*ز) cyr[Cyrillic]--\u003ecyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph LR 3 A[Hard edge] --\u0026gt;|Link text| B(Round edge) 4 B --\u0026gt; C{Decision} 5 C --\u0026gt;|One| D[Result one] 6 C --\u0026gt;|Two| E[Result two] 7{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph LR A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Class Diagram classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } State Diagram stateDiagram-v2 [*] --\u003e Active state Active { [*] --\u003e NumLockOff NumLockOff --\u003e NumLockOn : EvNumLockPressed NumLockOn --\u003e NumLockOff : EvNumLockPressed -- [*] --\u003e CapsLockOff CapsLockOff --\u003e CapsLockOn : EvCapsLockPressed CapsLockOn --\u003e CapsLockOff : EvCapsLockPressed -- [*] --\u003e ScrollLockOff ScrollLockOff --\u003e ScrollLockOn : EvScrollLockPressed ScrollLockOn --\u003e ScrollLockOff : EvScrollLockPressed } stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. Relationship Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2erDiagram 3 CUSTOMER ||--o{ ORDER : places 4 ORDER ||--|{ LINE-ITEM : contains 5 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 6{{\u0026lt; /mermaid \u0026gt;}} Result\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2journey 3 title My working day 4 section Go to work 5 Make tea: 5: Me 6 Go upstairs: 3: Me 7 Do work: 1: Me, Cat 8 section Go home 9 Go downstairs: 5: Me 10 Sit down: 5: Me 11{{\u0026lt; /mermaid \u0026gt;}} Result\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2gantt 3 dateFormat YYYY-MM-DD 4 title Adding GANTT diagram functionality to mermaid 5 excludes weekends 6 %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) 7 8 section A section 9 Completed task :done, des1, 2014-01-06,2014-01-08 10 Active task :active, des2, 2014-01-09, 3d 11 Future task : des3, after des2, 5d 12 Future task2 : des4, after des3, 5d 13 14 section Critical tasks 15 Completed task in the critical line :crit, done, 2014-01-06,24h 16 Implement parser and jison :crit, done, after des1, 2d 17 Create tests for parser :crit, active, 3d 18 Future task in critical line :crit, 5d 19 Create tests for renderer :2d 20 Add to mermaid :1d 21 22 section Documentation 23 Describe gantt syntax :active, a1, after des1, 3d 24 Add gantt diagram to demo page :after a1 , 20h 25 Add another diagram to demo page :doc1, after a1 , 48h 26 27 section Last section 28 Describe gantt syntax :after doc1, 3d 29 Add gantt diagram to demo page :20h 30 Add another diagram to demo page :48h 31{{\u0026lt; /mermaid \u0026gt;}} Result\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart 1{{\u0026lt; mermaid \u0026gt;}} 2pie 3 title Key elements in Product X 4 \u0026#34;Calcium\u0026#34; : 42.96 5 \u0026#34;Potassium\u0026#34; : 50.05 6 \u0026#34;Magnesium\u0026#34; : 10.01 7 \u0026#34;Iron\u0026#34; : 5 8{{\u0026lt; /mermaid \u0026gt;}} Result\npie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ","link":"https://nitelang.github.io/tuts/example/mermaid/","section":"tuts","title":"Mermaid"},{"body":"","link":"https://nitelang.github.io/blog/","section":"blog","title":"Blog"},{"body":" We're still in in the planning stage; Things may and are even likely to change! It's all psuedo-code atm after all. Feel free to open a PR, raise an issue(s) or request new feature(s). A Lighter Lua. Lua is a beautiful language, with a dirty mouth. Our goal is to clean it up -- even if it takes all Nite. By providing a more modern, succinct, and 'tasteful' syntax; That's 'cleanly transpiled'. As-in the IR it generates is effectively just regular old Lua. The goal is to maximize readibility, while maintaining as-much compatiblity as-possible. We want to be a \u0026quot;better Lua\u0026quot; but we still, decisively want to be Lua.\nIn the immediate though, the focus is on shrinking the surface syntax. There's a lot of easy gains to be made here -- to catch up with contemporary scripting-languages (goodbye, local and/or function keywords). There's also some more lofty / optimistic ideas like automatic end resolution (where we can effectively emulate at-option signficant identation), call \u0026amp; assignment blocks (through the new \u0026quot;feed\u0026quot; ,, and ;; \u0026quot;me\u0026quot; operators), which become a lot more important since we scope 'explicit by default', and a few more ideas I'm not confident-enough in them to share yet. lol\nOutside of \u0026quot;just syntax\u0026quot;. we plan to at least experiment with some features that would effectively make Nite a superset of Lua. These are always optional, and often try to build off ideas already present in the ecosystem. At minimum the goal would be gradual-typing, but some stuff like deeper metaprogramming x DSL creation are on the table (yes, pun intended). And we effectively want to provide a full extended standard \u0026amp; vendor library via mid.\nNite In A Few Points:\nWorks as a drop-in replacement for Lua. Has notably shorter keywords than Lua. Rejiggers a few keywords when it makes sense. Adds custom operators to cut down on noise. Isn't global-by-default, but explicit-by-default. Intends to implement opt-in significant identation. Intends to have a first-class HCR \u0026amp; REPL experience. Intends to offer deep syntax-extension / DSL creation. Intends to at-least mess around with deeper metaprogramming. Intends to provide optional type hinting and/or optional pragmas. Intends to have some kind of standard system for namespacing. Intends to provide first-class editor support for Lite \u0026amp; VSCode. (For The Most-Part) Transpiles into regular old Lua. Runs wherever a standard compliant Lua implementation does. Supports Lua 5.1 And Beyond. Getting StartedLatest Release\nNite is imagining a brighter, lighter, and more cohessive future for the Lua ecosystem. Star Light, Star Bright, First Star I See Tonight, I Wish I May, I Wish I Might, Have This Wish I Wish Tonight. #!/usr/bin/env nite spc nite.examples.moongl.hello_window use moongl as gl ,, moonglfw as glfw || settings var SCR_WIDTH, SCR_HEIGHT = 800, 600 || process all input: query GLFW whether relevant keys are pressed/released || this frame and react accordingly ful process_input(window) if glfw.get_key(window, \u0026#39;escape\u0026#39;) == \u0026#39;press\u0026#39; then glfw.set_window_should_close(window, true) fin || glfw: whenever the window size changed (by OS or user resize) this callback function executes ful framebuffer_size_callback(window, width, height) || make sure the viewport matches the new window dimensions; note that width and || height will be significantly larger than specified on retina displays. gl.viewport(0, 0, width, height) end || glfw: initialize and configure glfw ;; ,, window_hint(\u0026#39;context version major\u0026#39;, 3) ,, window_hint(\u0026#39;context version minor\u0026#39;, 3) ,, window_hint(\u0026#39;opengl profile\u0026#39;, \u0026#39;core\u0026#39;) || glfw window creation var window = glfw.create_window(SCR_WIDTH, SCR_HEIGHT, \u0026#34;LearnOpenGL\u0026#34;) glfw.make_context_current(window) gl.init() || this loads all OpenGL function pointers glfw.set_framebuffer_size_callback(window, framebuffer_size_callback) || render loop while not glfw.window_should_close(window) do || input process_input(window) || swap buffers and poll IO events (keys pressed/released, mouse moved etc.) glfw ;; ,, swap_buffers(window) ,, glfw.poll_events() end This Example Was Adapted; See Original Source.\n","link":"https://nitelang.github.io/","section":"","title":"Nite Lang"},{"body":"Smoothing Over Lua Coming Soonish ","link":"https://nitelang.github.io/blog/smoothed-over-lua/","section":"blog","title":"Smoothing Over Lua"},{"body":"","link":"https://nitelang.github.io/categories/","section":"categories","title":"Categories"},{"body":"These docs consists of two parts:\nHugo Compose Themes docs Hugo Clarity Theme docs. Please note that the features listed under each theme are independent of each other. That is to say, some features may only be found in one theme and not in both.\nCompose Theme Docs Clarity Theme Docs ","link":"https://nitelang.github.io/docs/","section":"docs","title":"README"},{"body":"","link":"https://nitelang.github.io/tags/","section":"tags","title":"Tags"}]